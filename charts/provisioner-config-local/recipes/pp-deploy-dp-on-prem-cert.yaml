apiVersion: v1
kind: helm-install
meta:
  guiEnv:
    note: "deploy-dp-on-prem-cert"
    GUI_TP_INSTALL_NGINX_INGRESS: true
    GUI_TP_INSTALL_TRAEFIK_INGRESS: false
    GUI_TP_DNS_DOMAIN: "localhost.dataplanes.pro"
    GUI_PIPELINE_LOG_DEBUG: false
    GUI_TP_TLS_CERT: ""
    GUI_TP_TLS_KEY: ""
  globalEnvVariable:
    REPLACE_RECIPE: true
    PIPELINE_LOG_DEBUG: ${GUI_PIPELINE_LOG_DEBUG}
    PIPELINE_CHECK_DOCKER_STATUS: false
    # env
    TP_CLUSTER_NAME: ${GUI_TP_CLUSTER_NAME:-"on-prem"}
    # domain
    TP_INSTALL_NGINX_INGRESS: ${GUI_TP_INSTALL_NGINX_INGRESS:-"true"}
    TP_INGRESS_NAMESPACE: ingress-system
    TP_DNS_DOMAIN: ${GUI_TP_DNS_DOMAIN:-"localhost.dataplanes.pro"}
    TP_INGRESS_SERVICE_TYPE: ClusterIP # LoadBalancer used for minikube with tunel, NodePort used for kind, ClusterIP used for kubectl port-forward
    TP_INGRESS_USE_HOSTPORT: false # true for kind
    TP_INSTALL_TRAEFIK_INGRESS: ${GUI_TP_INSTALL_TRAEFIK_INGRESS:-"false"}
    TP_TLS_CERT: ${GUI_TP_TLS_CERT}
    TP_TLS_KEY: ${GUI_TP_TLS_KEY}
    # storage
    TP_STORAGE_CLASS: ${GUI_TP_STORAGE_CLASS:-"standard"} # hostpath for docker for mac, standard for minikube and kind, microk8s-hostpath for microk8s
    # third party
    TP_EXT_NAMESPACE: tibco-ext
    # CP DB setup env
    TP_INSTALL_POSTGRES: false
    TP_DB_USER_NAME: ${GUI_TP_DB_USER_NAME:-"postgres"} # TP_RDS_USERNAME in create-rds.sh
    TP_DB_PASSWORD: ${GUI_TP_DB_PASSWORD:-"postgres"} # TP_RDS_MASTER_PASSWORD in create-rds.sh
    TP_DB_NAME: postgres
    TP_DB_SECRET_NAME: provider-cp-database-credentials # not used
    # flow control
    TP_INSTALL_CERT_MANAGER: true
    TP_INSTALL_METRICS_SERVER: true
  tools:
    yq: "4.40"
    helm: "3.13"
    kubectl: "1.28"
helmCharts:
- condition: ${TP_INSTALL_CERT_MANAGER}
  name: cert-manager
  version: v1.13.2 # release: https://github.com/cert-manager/cert-manager/releases
  repo:
    helm:
      url: https://charts.jetstack.io
  values:
    keepPrevious: true
    content: |
      installCRDs: true
      serviceAccount:
        create: true
        name: cert-manager
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: cert-manager
  namespace: cert-manager
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- condition: ${TP_INSTALL_METRICS_SERVER}
  name: metrics-server
  version: "3.12.0"
  repo:
    helm:
      url: https://kubernetes-sigs.github.io/metrics-server/
  values:
    keepPrevious: true
    content: |
      clusterName: ${TP_CLUSTER_NAME}
      serviceAccount:
        create: true
        name: metrics-server
      args:
        - "--kubelet-insecure-tls" # https://github.com/docker/for-mac/issues/6274#issuecomment-1259624307
        - "--metric-resolution=90s"
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: metrics-server
  namespace: kube-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- condition: ${TP_INSTALL_TRAEFIK_INGRESS}
  name: traefik
  namespace: ${TP_INGRESS_NAMESPACE}
  version: "26.1.0"
  repo:
    helm:
      url: https://traefik.github.io/charts
  values:
    content: |
      # traefik doc: https://doc.traefik.io/traefik/
      # release: https://github.com/traefik/traefik-helm-chart/releases
      # chart values: https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
      hub: # for hub
        enabled: true
      service: # for external-dns
        annotations:
          external-dns.alpha.kubernetes.io/hostname: dashboard.${TP_DNS_DOMAIN}
      ingressRoute: # for dashboard http://dashboard.localhost/dashboard/#/
        dashboard:
          matchRule: Host(`dashboard.${TP_DNS_DOMAIN}`) && PathPrefix(`/dashboard`) || Host(`dashboard.${TP_DNS_DOMAIN}`) && PathPrefix(`/api`)
          entryPoints:
            - traefik
            - web
            - websecure
      providers: # for external service
        kubernetesIngress:
          allowExternalNameServices: true
      additionalArguments:
        - '--serversTransport.insecureSkipVerify=true'
      tlsStore: # for default certificate
        default:
          defaultCertificate:
            secretName: default-certificate
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: traefik
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: false
      content: |
        kubectl create ns ${TP_INGRESS_NAMESPACE}
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: default-certificate
          namespace: ${TP_INGRESS_NAMESPACE}
        type: Opaque
        data:
          tls.crt: ${TP_TLS_CERT}
          tls.key: ${TP_TLS_KEY}
        EOF
- condition: ${TP_INSTALL_NGINX_INGRESS}
  name: ingress-nginx
  namespace: ${TP_INGRESS_NAMESPACE}
  version: 4.10.0 # release: https://github.com/kubernetes/ingress-nginx/releases
  repo:
    helm:
      url: https://kubernetes.github.io/ingress-nginx
  values:
    keepPrevious: true
    content: |
      # ingress-nginx doc: https://docs.nginx.com/nginx-ingress-controller/
      # ingress-nginx chart values: https://github.com/kubernetes/ingress-nginx/blob/main/charts/ingress-nginx/values.yaml
      controller:
        allowSnippetAnnotations: true # https://github.com/kubernetes/ingress-nginx/pull/10393
        hostPort:
          enabled: ${TP_INGRESS_USE_HOSTPORT} # true for kind
        service:
          type: ${TP_INGRESS_SERVICE_TYPE} # NodePort for kind, LoadBalancer for others
        ingressClass:
          - nginx
        extraArgs:
          default-ssl-certificate: ${TP_INGRESS_NAMESPACE}/default-certificate
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: ingress-nginx
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: false
      content: |
        kubectl create ns ${TP_INGRESS_NAMESPACE}
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: default-certificate
          namespace: ${TP_INGRESS_NAMESPACE}
        type: Opaque
        data:
          tls.crt: ${TP_TLS_CERT}
          tls.key: ${TP_TLS_KEY}
        EOF
- name: postgresql
  version: 11.9.13 # 14.3.3 use postgresql 16.2.0, 11.9.13 use postgresql 14.5.0 PCP-4922
  namespace: ${TP_EXT_NAMESPACE}
  releaseName: postgresql
  condition: ${TP_INSTALL_POSTGRES}
  repo:
    helm:
      url: https://charts.bitnami.com/bitnami
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  values:
    keepPrevious: true
    content: |
      auth:
        postgresPassword: ${TP_DB_PASSWORD}
        username: ${TP_DB_USER_NAME}
        password: ${TP_DB_PASSWORD}
        database: "${TP_DB_NAME}"
      persistence:
        storageClass: ${TP_STORAGE_CLASS}
  flags:
    createNamespace: true
    timeout: 1h
