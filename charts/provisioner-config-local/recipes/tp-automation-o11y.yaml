#
# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

apiVersion: v1
kind: generic-runner
meta:
  guiEnv:
    note: "tp-automation-o11y"
    GUI_PIPELINE_LOG_DEBUG: false

    GUI_TP_CLUSTER_NAME: 'on-perm'
    GUI_GITHUB_TOKEN: ""

    # automation setup
    GUI_TP_AUTO_CP_VERSION: ""    # keep it empty, unless you see an error with GUI_TP_AUTO_CP_VERSION in the logs
    GUI_TP_AUTO_USE_LOCAL_SCRIPT: false
    GUI_TP_AUTO_USE_GITHUB_SCRIPT: true
    GUI_TP_AUTO_REPORT_PATH: "/tmp/auto/report"
    GUI_TP_AUTO_REPORT_YAML_FILE: "report.yaml"
    GUI_TP_AUTO_REPORT_TXT_FILE: "report.txt"
    GUI_TP_AUTO_GITHUB_REPO_NAME: "github.com/TIBCOSoftware/platform-provisioner"
    GUI_TP_AUTO_GITHUB_REPO_PATH: "docs/recipes/automation/tp-setup/bootstrap"
    GUI_TP_AUTO_GITHUB_REPO_BRANCH: "provisioner-config-local-{{ .Chart.Version }}"

    # DP capabilities deployment
    GUI_TP_AUTO_ACTIVE_USER: true
    GUI_TP_AUTO_ENABLE_DP: true
    GUI_TP_AUTO_ENABLE_CONFIG_O11Y: true
    GUI_TP_AUTO_ENABLE_FLOGO: true
    GUI_TP_AUTO_ENABLE_BWCE: false
    GUI_TP_AUTO_ENABLE_TIBCOHUB: false
    GUI_TP_AUTO_ENABLE_EMS: false
    GUI_TP_AUTO_ENABLE_PULSAR: false

    # CP setup
    GUI_TP_AUTO_CP_INSTANCE_ID: "cp1"
    GUI_TP_AUTO_CP_DNS_DOMAIN: "localhost.dataplanes.pro"
    GUI_TP_AUTO_CP_SERVICE_DNS_DOMAIN: ""
    GUI_TP_AUTO_CP_DNS_DOMAIN_PREFIX_BWCE: ""
    GUI_TP_AUTO_CP_DNS_DOMAIN_PREFIX_FLOGO: ""
    GUI_TP_AUTO_CP_DNS_DOMAIN_PREFIX_TIBCOHUB: ""
    GUI_TP_AUTO_LOGIN_URL: ""
    GUI_TP_AUTO_MAIL_URL: ""
    GUI_TP_AUTO_ADMIN_URL: ""

    # CP subscription
    GUI_DP_HOST_PREFIX: "cp-sub1"
    GUI_DP_USER_EMAIL: "cp-sub1@tibco.com"
    GUI_DP_USER_PASSWORD: "Tibco@123"
    GUI_CP_ADMIN_EMAIL: "cp-test@tibco.com"
    GUI_CP_ADMIN_PASSWORD: "Tibco@123"

    # DP setup
    GUI_TP_AUTO_K8S_DP_NAME: "k8s-auto-dp1"
    GUI_TP_AUTO_K8S_DP_NAMESPACE: "k8s-auto-dp1ns"
    GUI_TP_AUTO_K8S_DP_SERVICE_ACCOUNT: "k8s-auto-dp1sa"
    GUI_TP_AUTO_INGRESS_CONTROLLER: "nginx"
    GUI_TP_AUTO_INGRESS_CONTROLLER_CLASS_NAME: "nginx"
    GUI_TP_AUTO_STORAGE_CLASS: "hostpath"

    # DP o11y setup
    GUI_TP_AUTO_ELASTIC_URL: ""
    GUI_TP_AUTO_ELASTIC_USER: ""
    GUI_TP_AUTO_ELASTIC_PASSWORD: ""
    GUI_TP_AUTO_PROMETHEUS_URL: ""
    GUI_TP_AUTO_PROMETHEUS_USER: ""
    GUI_TP_AUTO_PROMETHEUS_PASSWORD: ""

    # fqdn setup
    GUI_TP_AUTO_FQDN_BWCE: ""
    GUI_TP_AUTO_FQDN_FLOGO: ""
    GUI_TP_AUTO_FQDN_TIBCOHUB: ""

    # flow control
    GUI_TP_PORT_FORWARD: true
    GUI_TP_OVERWRITE_DNS: false
  globalEnvVariable:
    REPLACE_RECIPE: true
    PIPELINE_CHECK_DOCKER_STATUS: false
    PIPELINE_LOG_DEBUG: ${GUI_PIPELINE_LOG_DEBUG}

    GITHUB_TOKEN: ${GUI_GITHUB_TOKEN:-""}
    TP_CLUSTER_NAME: ${GUI_TP_CLUSTER_NAME:-"on-prem"}

    # automation setup
    TP_AUTO_CP_VERSION: ${GUI_TP_AUTO_CP_VERSION:-""}
    TP_AUTO_USE_LOCAL_SCRIPT: ${GUI_TP_AUTO_USE_LOCAL_SCRIPT:-false}
    TP_AUTO_USE_GITHUB_SCRIPT: ${GUI_TP_AUTO_USE_GITHUB_SCRIPT:-true}
    TP_AUTO_SCRIPT_FOLDER: ${GUI_TP_AUTO_SCRIPT_FOLDER:-"/tmp/auto"}
    TP_AUTO_REPORT_PATH: ${GUI_TP_AUTO_REPORT_PATH:-"/tmp/auto/report"}
    TP_AUTO_REPORT_YAML_FILE: ${GUI_TP_AUTO_REPORT_YAML_FILE:-"report.yaml"}
    TP_AUTO_REPORT_TXT_FILE: ${GUI_TP_AUTO_REPORT_TXT_FILE:-"report.txt"}
    TP_AUTO_GITHUB_REPO_NAME: ${GUI_TP_AUTO_GITHUB_REPO_NAME:-"github.com/TIBCOSoftware/platform-provisioner"}
    TP_AUTO_GITHUB_REPO_PATH: ${GUI_TP_AUTO_GITHUB_REPO_PATH:-"docs/recipes/automation/tp-setup/bootstrap"}
    TP_AUTO_GITHUB_REPO_BRANCH: ${GUI_TP_AUTO_GITHUB_REPO_BRANCH:-"provisioner-config-local-{{ .Chart.Version }}"}

    # DP capabilities deployment
    TP_AUTO_ACTIVE_USER: ${GUI_TP_AUTO_ACTIVE_USER:-true}
    TP_AUTO_ENABLE_DP: ${GUI_TP_AUTO_ENABLE_DP:-true}
    TP_AUTO_IS_CREATE_DP: ${GUI_TP_AUTO_ENABLE_DP:-true} # need this as global value
    TP_AUTO_ENABLE_CONFIG_O11Y: ${GUI_TP_AUTO_ENABLE_CONFIG_O11Y:-true}
    TP_AUTO_IS_CONFIG_O11Y: ${GUI_TP_AUTO_ENABLE_CONFIG_O11Y:-false} # need this as global value
    TP_AUTO_ENABLE_FLOGO: ${GUI_TP_AUTO_ENABLE_FLOGO:-true}
    TP_AUTO_ENABLE_BWCE: ${GUI_TP_AUTO_ENABLE_BWCE:-true}
    TP_AUTO_ENABLE_TIBCOHUB: ${GUI_TP_AUTO_ENABLE_TIBCOHUB:-true}
    TP_AUTO_ENABLE_EMS: ${GUI_TP_AUTO_ENABLE_EMS:-true}
    TP_AUTO_ENABLE_PULSAR: ${GUI_TP_AUTO_ENABLE_PULSAR:-true}

    # CP setup
    TP_AUTO_CP_INSTANCE_ID: ${GUI_TP_AUTO_CP_INSTANCE_ID:-"cp1"}
    TP_AUTO_CP_DNS_DOMAIN: ${GUI_TP_AUTO_CP_DNS_DOMAIN:-"localhost.dataplanes.pro"}
    TP_AUTO_CP_SERVICE_DNS_DOMAIN: ${GUI_TP_AUTO_CP_SERVICE_DNS_DOMAIN:-""} # full domain of CP
    TP_AUTO_CP_DNS_DOMAIN_PREFIX_BWCE: ${GUI_TP_AUTO_CP_DNS_DOMAIN_PREFIX_BWCE:-"bwce"}
    TP_AUTO_CP_DNS_DOMAIN_PREFIX_FLOGO: ${GUI_TP_AUTO_CP_DNS_DOMAIN_PREFIX_FLOGO:-"flogo"}
    TP_AUTO_CP_DNS_DOMAIN_PREFIX_TIBCOHUB: ${GUI_TP_AUTO_CP_DNS_DOMAIN_PREFIX_TIBCOHUB:-"tibcohub"}
    TP_AUTO_LOGIN_URL: ${GUI_TP_AUTO_LOGIN_URL:-""}
    TP_AUTO_MAIL_URL: ${GUI_TP_AUTO_MAIL_URL:-""}
    TP_AUTO_ADMIN_URL: ${GUI_TP_AUTO_ADMIN_URL:-""}

    # CP subscription
    DP_HOST_PREFIX: ${GUI_DP_HOST_PREFIX:-"cp-sub1"}
    DP_USER_EMAIL: ${GUI_DP_USER_EMAIL:-"cp-sub1@tibco.com"}
    DP_USER_PASSWORD: ${GUI_DP_USER_PASSWORD:-"Tibco@123"}
    CP_ADMIN_EMAIL: ${GUI_CP_ADMIN_EMAIL:-"cp-test@tibco.com"}
    CP_ADMIN_PASSWORD: ${GUI_CP_ADMIN_PASSWORD:-"Tibco@123"}

    # DP setup
    TP_AUTO_K8S_DP_NAME: ${GUI_TP_AUTO_K8S_DP_NAME:-"k8s-auto-dp1"}
    TP_AUTO_K8S_DP_NAMESPACE: ${GUI_TP_AUTO_K8S_DP_NAMESPACE:-"k8s-auto-dp1ns"}
    TP_AUTO_K8S_DP_SERVICE_ACCOUNT: ${GUI_TP_AUTO_K8S_DP_SERVICE_ACCOUNT:-"k8s-auto-dp1sa"}
    TP_AUTO_INGRESS_CONTROLLER: ${GUI_TP_AUTO_INGRESS_CONTROLLER:-"nginx"}
    TP_AUTO_INGRESS_CONTROLLER_CLASS_NAME: ${GUI_TP_AUTO_INGRESS_CONTROLLER_CLASS_NAME:-"nginx"}
    TP_AUTO_STORAGE_CLASS: ${GUI_TP_AUTO_STORAGE_CLASS:-"hostpath"}

    # DP o11y setup
    TP_AUTO_ELASTIC_URL: ${GUI_TP_AUTO_ELASTIC_URL:-""}
    TP_AUTO_ELASTIC_USER: ${GUI_TP_AUTO_ELASTIC_USER:-""}
    TP_AUTO_ELASTIC_PASSWORD: ${GUI_TP_AUTO_ELASTIC_PASSWORD:-""}
    TP_AUTO_PROMETHEUS_URL: ${GUI_TP_AUTO_PROMETHEUS_URL:-""}
    TP_AUTO_PROMETHEUS_USER: ${GUI_TP_AUTO_PROMETHEUS_USER:-""}
    TP_AUTO_PROMETHEUS_PASSWORD: ${GUI_TP_AUTO_PROMETHEUS_PASSWORD:-""}

    # fqdn setup
    TP_AUTO_FQDN_BWCE: ${GUI_TP_AUTO_FQDN_BWCE:-""}
    TP_AUTO_FQDN_FLOGO: ${GUI_TP_AUTO_FQDN_FLOGO:-""}
    TP_AUTO_FQDN_TIBCOHUB: ${GUI_TP_AUTO_FQDN_TIBCOHUB:-""}

    # flow control
    PYTHON_FILE_LOGIN_POINT: page_auth.py
    PYTHON_FILE_ENTRY_POINT: run.py
    PYTHON_FILE_ENV_POINT: page_env.py
    TP_OVERWRITE_DNS: ${GUI_TP_OVERWRITE_DNS:-false}
    TP_PORT_FORWARD: ${GUI_TP_PORT_FORWARD:-true}
tasks:
- condition: ${TP_OVERWRITE_DNS} # this is used for overwrite DNS
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      echo "nameserver 10.178.2.10" > /etc/resolv.conf
- condition: ${TP_PORT_FORWARD} # this is used for run pipeline locally
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      cd /tmp
      nohup kubectl port-forward -n ingress-system --address 0.0.0.0 service/ingress-nginx-controller 80:http 443:https &
- condition: ${TP_AUTO_USE_GITHUB_SCRIPT}
  clusters:
    - name: ${TP_CLUSTER_NAME}
  repo:
    git:
      github:
        repo: ${TP_AUTO_GITHUB_REPO_NAME}
        path: ${TP_AUTO_GITHUB_REPO_PATH}
        branch: ${TP_AUTO_GITHUB_REPO_BRANCH}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      mkdir -p ${TP_AUTO_SCRIPT_FOLDER}
      cp * ${TP_AUTO_SCRIPT_FOLDER}
      pip install -r requirements.txt
- condition: ${TP_AUTO_USE_LOCAL_SCRIPT}
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      cd ${TP_AUTO_SCRIPT_FOLDER}
      pip install -r requirements.txt
- condition: ${TP_AUTO_ACTIVE_USER} # only create admin and subscription
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      cd ${TP_AUTO_SCRIPT_FOLDER}
      _report_file="${TP_AUTO_REPORT_PATH}/${TP_AUTO_REPORT_YAML_FILE}"
      
      if [[ -f "$_report_file" ]]; then
        if [[ "$(yq '.ENV.REPORT_AUTO_ACTIVE_USER' "$_report_file")" == "true" ]]; then
          echo "----------------------------------------------------------------"
          echo "ENV.REPORT_AUTO_ACTIVE_USER is true. User has been active. Exiting..."
          echo "----------------------------------------------------------------"
          exit 0
        else
          echo "_report_file: ${_report_file}"
          cat "$_report_file"
        fi
      fi
      
      python ${PYTHON_FILE_LOGIN_POINT}
      _result=$?
      echo "python return code: ${_result}"
      exit ${_result}
- condition: ${TP_AUTO_ENABLE_DP} # only create DP
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      export TP_AUTO_IS_CREATE_DP=${TP_AUTO_ENABLE_DP}
      cd ${TP_AUTO_SCRIPT_FOLDER}
      _report_file="${TP_AUTO_REPORT_PATH}/${TP_AUTO_REPORT_YAML_FILE}"
      if [[ -f "$_report_file" ]]; then
        # Get all dataPlane.name and concatenate them into a,b,c format
        dp_names=$(yq '.dataPlane[].name' "$_report_file" | tr '\n' ',' | sed 's/,$//')
        if [[ -n "$dp_names" ]]; then
          echo "----------------------------------------------------------------"
          echo "dataPlane[$dp_names] already exists. Exiting..."
          echo "----------------------------------------------------------------"
          exit 0
        else
          echo "_report_file: ${_report_file}"
          cat "$_report_file"
        fi
      fi
      
      python ${PYTHON_FILE_ENTRY_POINT}
      _result=$?
      echo "python return code: ${_result}"
      exit ${_result}
- condition: ${TP_AUTO_ENABLE_FLOGO} # only deploy flogo
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      export TP_AUTO_IS_PROVISION_FLOGO=${TP_AUTO_ENABLE_FLOGO}
      cd ${TP_AUTO_SCRIPT_FOLDER}
      python ${PYTHON_FILE_ENTRY_POINT}
      _result=$?
      echo "python return code: ${_result}"
      exit ${_result}
- condition: ${TP_AUTO_ENABLE_BWCE} # only deploy bwce
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      export TP_AUTO_IS_PROVISION_BWCE=${TP_AUTO_ENABLE_BWCE}
      cd ${TP_AUTO_SCRIPT_FOLDER}
      python ${PYTHON_FILE_ENTRY_POINT}
      _result=$?
      echo "python return code: ${_result}"
      exit ${_result}
- condition: ${TP_AUTO_ENABLE_TIBCOHUB} # only deploy tibcohub
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      export TP_AUTO_IS_PROVISION_TIBCOHUB=${TP_AUTO_ENABLE_TIBCOHUB}
      cd ${TP_AUTO_SCRIPT_FOLDER}
      python ${PYTHON_FILE_ENTRY_POINT}
      _result=$?
      echo "python return code: ${_result}"
      exit ${_result}
- condition: ${TP_AUTO_ENABLE_EMS} # only deploy bwce
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      export TP_AUTO_IS_PROVISION_EMS=${TP_AUTO_ENABLE_EMS}
      cd ${TP_AUTO_SCRIPT_FOLDER}
      python ${PYTHON_FILE_ENTRY_POINT}
      _result=$?
      echo "python return code: ${_result}"
      exit ${_result}
- condition: ${TP_AUTO_ENABLE_PULSAR} # only deploy bwce
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      export TP_AUTO_IS_PROVISION_PULSAR=${TP_AUTO_ENABLE_PULSAR}
      cd ${TP_AUTO_SCRIPT_FOLDER}
      python ${PYTHON_FILE_ENTRY_POINT}
      _result=$?
      echo "python return code: ${_result}"
      exit ${_result}
- condition: true
  clusters:
    - name: ${TP_CLUSTER_NAME}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      cd ${TP_AUTO_SCRIPT_FOLDER}
      python ${PYTHON_FILE_ENV_POINT}
      _result=$?
      echo "python return code: ${_result}"
      exit ${_result}
