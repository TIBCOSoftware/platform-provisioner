#
# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

pipelineName: "Register Developer Data Plane with Control Plane"
description: |
  This pipeline is a helper to register data plane with the control plane.
  This is developer use case that all docker image will be pulled from AWS ECR.
  To achieve this; we will use Platform Provisioner cloud service to get the ECR token.
options:
- name: "DATAPLANE_ID"
  type: string
  guiType: input
  reference: "meta.guiEnv.GUI_DP_DATAPLANE_ID"
  required: true
  description: "Data Plane ID used for ECR secret"
- name: "DP_NAMESPACE"
  type: string
  guiType: input
  reference: "meta.guiEnv.GUI_DP_NAMESPACE"
  required: true
  description: "Namespace to install the ECR secret"
- name: "GUI_DP_CONTAINER_REGISTRY"
  type: string
  guiType: input
  reference: "meta.guiEnv.GUI_DP_CONTAINER_REGISTRY"
  description: "The container registry URL"
- name: "GUI_DP_CONTAINER_REGISTRY_USERNAME"
  type: string
  guiType: input
  reference: "meta.guiEnv.GUI_DP_CONTAINER_REGISTRY_USERNAME"
  description: "The container registry user name"
- name: "GUI_DP_CONTAINER_REGISTRY_PASSWORD"
  type: string
  guiType: input
  reference: "meta.guiEnv.GUI_DP_CONTAINER_REGISTRY_PASSWORD"
  required: true
  description: "The container registry password"
- name: "1. Namespace creation"
  type: string
  guiType: textarea
  lang: SH
  reference: "tasks[0].script.content"
  required: true
  description: "Script to create namespace"
- name: "2. Service Account creation"
  type: string
  guiType: textarea
  lang: SH
  reference: "tasks[1].script.content"
  required: true
  description: "Script to create service account"
- name: "3. Cluster Registration"
  type: string
  guiType: textarea
  lang: SH
  reference: "tasks[2].script.content"
  required: true
  description: "Script to register the cluster and deploy dp core infrastructure"
- name: "GUI_PIPELINE_LOG_DEBUG"
  type: boolean
  guiType: checkbox
  reference: "meta.guiEnv.GUI_PIPELINE_LOG_DEBUG"
recipe: |
  apiVersion: v1
  kind: generic-runner
  meta:
    guiEnv:
      note: "register-dp-de"
      GUI_DP_DATAPLANE_ID: ""
      GUI_DP_NAMESPACE: ""
      GUI_DP_CONTAINER_REGISTRY: ""
      GUI_DP_CONTAINER_REGISTRY_USERNAME: ""  
      GUI_DP_CONTAINER_REGISTRY_PASSWORD: ""
      GUI_PIPELINE_LOG_DEBUG: false
    globalEnvVariable:
      REPLACE_RECIPE: true
      PIPELINE_LOG_DEBUG: ${GUI_PIPELINE_LOG_DEBUG}
      PIPELINE_CHECK_DOCKER_STATUS: false
      # DP settings
      DP_DATAPLANE_ID: ${GUI_DP_DATAPLANE_ID}
      DP_NAMESPACE: ${GUI_DP_NAMESPACE}
      DP_ECR_TOKEN: ${GUI_DP_ECR_TOKEN}
      DP_CONTAINER_REGISTRY: ${GUI_DP_CONTAINER_REGISTRY:-"csgprduswrepoedge.jfrog.io"}
      DP_CONTAINER_REGISTRY_USERNAME: "${GUI_DP_CONTAINER_REGISTRY_USERNAME}"
      DP_CONTAINER_REGISTRY_PASSWORD: "${GUI_DP_CONTAINER_REGISTRY_PASSWORD}"
  tasks:
    - condition: true
      script:
        ignoreErrors: false
        fileName: script.sh
        content: |
          # install namespace

    - condition: true
      script:
        ignoreErrors: false
        fileName: script.sh
        content: |
          # install dp-configure-namespace

    - condition: true
      script:
        ignoreErrors: false
        fileName: script.sh
        content: |
          # install dp-core-infrastructure

    - condition: true
      script:
        ignoreErrors: false
        fileName: script.sh
        content: |
          # install ECR secret
          AWS_REGION=${AWS_REGION:-us-west-2}
  
          kubectl delete secret --namespace ${DP_NAMESPACE} ${DP_DATAPLANE_ID} 2>/dev/null
          kubectl create secret docker-registry ${DP_DATAPLANE_ID} \
          --docker-server=${DP_CONTAINER_REGISTRY} \
          --docker-username=${DP_CONTAINER_REGISTRY_USERNAME} \
          --docker-password=${DP_CONTAINER_REGISTRY_PASSWORD} \
          --namespace=${DP_NAMESPACE}
    - condition: true
      script:
        ignoreErrors: false
        fileName: script.sh
        content: |
          # patch infra deployments
          function patch() {
            pods=$1
            echo "patching $pods"
            kubectl patch deployment -n ${DP_NAMESPACE} ${pods} \
              --type='json' -p="[{\"op\": \"replace\", \"path\": \"/spec/template/spec/imagePullSecrets\", \"value\":[{\"name\":\"$DP_DATAPLANE_ID\"}]}]"
          }
          
          patch tp-tibtunnel
          patch provisioner-agent
          patch haproxy-dp-${DP_DATAPLANE_ID}
          echo "done"
