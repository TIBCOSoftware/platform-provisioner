#
# Copyright (c) 2024 TIBCO Software Inc.
# All Rights Reserved. Confidential & Proprietary.
#

# standard ubuntu.
# azure cli only works with 24.04 (not 24.10)
#FROM --platform=${BUILDPLATFORM} ubuntu:24.04

# Ubuntu 24 and 25 has strict glibc which will effect compbility between curl and coredns (star CNAME)
# FROM --platform=${BUILDPLATFORM} mcr.microsoft.com/playwright/python:v1.49.1-noble-${TARGETARCH}
# Ubuntu 22.04 playwright release
# Microsoft artifact is not multi-arch build. see: https://mcr.microsoft.com/en-us/artifact/mar/playwright/tags
FROM --platform=${BUILDPLATFORM} mcr.microsoft.com/playwright/python:v1.49.1-jammy-${TARGETARCH}

ARG TARGETOS TARGETARCH

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gettext gettext-base jq vim tree unzip net-tools iputils-tracepath iproute2 iputils-ping dnsutils \
    apt-transport-https ca-certificates apt-transport-https lsb-release gnupg && \
    rm -rf /var/lib/apt/lists/*

# Install AWS CLI v2
# release note: https://raw.githubusercontent.com/aws/aws-cli/v2/CHANGELOG.rst
# installation: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-version.html
# AWS use x86_64 and aarch64 but docker use amd64 and arm64
ARG AWS_CLI_VERSION
ENV AWS_CLI_VERSION=${AWS_CLI_VERSION:-"2.18.0"}
RUN AWS_ARCH=${TARGETARCH}; [ "${TARGETARCH}" = "arm64" ] && AWS_ARCH="aarch64" || true && \
    [ "${TARGETARCH}" = "amd64" ] && AWS_ARCH="x86_64" || true && \
    curl "https://awscli.amazonaws.com/awscli-exe-${TARGETOS}-${AWS_ARCH}-${AWS_CLI_VERSION}.zip" -o "awscliv2.zip" \
    && unzip -qq awscliv2.zip \
    && ./aws/install \
    && rm -rf awscliv2.zip ./aws

# eksctl https://github.com/eksctl-io/eksctl/releases
ARG EKSCTL_VERSION
ENV EKSCTL_VERSION=${EKSCTL_VERSION:-"v0.191.0"}
RUN CMD_NAME=eksctl && \
    curl --silent --location "https://github.com/eksctl-io/eksctl/releases/download/${EKSCTL_VERSION}/${CMD_NAME}_$(uname -s)_${TARGETARCH}.tar.gz" | tar xz -C /tmp && \
    chmod +x /tmp/${CMD_NAME} && mv /tmp/${CMD_NAME} /usr/local/bin/${CMD_NAME}-${EKSCTL_VERSION} && \
    ln -sf /usr/local/bin/${CMD_NAME}-${EKSCTL_VERSION} /usr/local/bin/${CMD_NAME} && \
    ${CMD_NAME} version

# aws ecr credentials helper
# https://github.com/awslabs/amazon-ecr-credential-helper/releases
ARG ECR_LOGIN_VERSION
ENV ECR_LOGIN_VERSION=${ECR_LOGIN_VERSION:-"0.9.0"}
RUN CMD_NAME=docker-credential-ecr-login && \
    curl --silent --location "https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/${ECR_LOGIN_VERSION}/${TARGETOS}-${TARGETARCH}/docker-credential-ecr-login" -o /tmp/${CMD_NAME} && \
    chmod +x /tmp/${CMD_NAME} && mv /tmp/${CMD_NAME} /usr/local/bin/${CMD_NAME}-${ECR_LOGIN_VERSION} && \
    ln -sf /usr/local/bin/${CMD_NAME}-${ECR_LOGIN_VERSION} /usr/local/bin/${CMD_NAME} && \
    ${CMD_NAME} -v

# add Azure repo
# check new version: apt-cache policy azure-cli
# azure CLI supported ubuntu: https://packages.microsoft.com/repos/azure-cli/dists/
ARG AZURE_CLI_VERSION
ENV AZURE_CLI_VERSION=${AZURE_CLI_VERSION:-"2.64.0"}
RUN mkdir -p /etc/apt/keyrings && \
    curl -sLS https://packages.microsoft.com/keys/microsoft.asc | \
      gpg --dearmor | tee /etc/apt/keyrings/microsoft.gpg > /dev/null && \
    chmod go+r /etc/apt/keyrings/microsoft.gpg && \
    AZ_DIST=$(lsb_release -cs) && \
    echo "Types: deb" > /etc/apt/sources.list.d/azure-cli.sources && \
    echo "URIs: https://packages.microsoft.com/repos/azure-cli/" >> /etc/apt/sources.list.d/azure-cli.sources && \
    echo "Suites: ${AZ_DIST}" >> /etc/apt/sources.list.d/azure-cli.sources && \
    echo "Components: main" >> /etc/apt/sources.list.d/azure-cli.sources && \
    echo "Architectures: $(dpkg --print-architecture)" >> /etc/apt/sources.list.d/azure-cli.sources && \
    echo "Signed-by: /etc/apt/keyrings/microsoft.gpg" >> /etc/apt/sources.list.d/azure-cli.sources && \
    apt-get update && apt-get install -y azure-cli=${AZURE_CLI_VERSION}-1~${AZ_DIST}

# Azure CLI Bicep https://github.com/Azure/bicep/releases
ARG AZURE_CLI_BICEP_VERSION
ENV AZURE_CLI_BICEP_VERSION=${AZURE_CLI_BICEP_VERSION:-"v0.30.23"}
RUN echo "AZURE_CLI_BICEP_VERSION=${AZURE_CLI_BICEP_VERSION}" && \
    az --version && \
    az bicep install --version ${AZURE_CLI_BICEP_VERSION} && \
    az extension add --name aks-preview && \
    az extension update --name aks-preview

# gcloud cli https://cloud.google.com/sdk/docs/release-notes
# check new version: apt-cache policy google-cloud-cli
# installation: https://cloud.google.com/sdk/docs/install#deb
ARG CLOUD_SDK_VERSION
ENV CLOUD_SDK_VERSION=${CLOUD_SDK_VERSION:-"495.0.0"}
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg && \
    apt-get update -y && apt-get install -y google-cloud-cli=${CLOUD_SDK_VERSION}-0  google-cloud-cli-gke-gcloud-auth-plugin=${CLOUD_SDK_VERSION}-0 && \
    export CLOUDSDK_CORE_DISABLE_PROMPTS=1 && \
    gcloud config set core/disable_usage_reporting true && \
    gcloud config set component_manager/disable_update_check true && \
    gcloud config set metrics/environment docker_image_alpine && \
    gcloud --version

# cue for yaml validation https://github.com/cue-lang/cue/releases
ARG CUE_VERSION
ENV CUE_VERSION=${CUE_VERSION:-"v0.10.0"}
RUN CMD_NAME=cue && \
    curl --silent --location "https://github.com/cue-lang/cue/releases/download/${CUE_VERSION}/${CMD_NAME}_${CUE_VERSION}_${TARGETOS}_${TARGETARCH}.tar.gz" | tar xz -C /tmp && \
    chmod +x /tmp/${CMD_NAME} && mv /tmp/${CMD_NAME} /usr/local/bin/${CMD_NAME}-${CUE_VERSION} && \
    ln -sf /usr/local/bin/${CMD_NAME}-${CUE_VERSION} /usr/local/bin/${CMD_NAME} && \
    ${CMD_NAME} version

# yq 4 utility https://github.com/mikefarah/yq/releases
ARG YQ_VERSION_440
ENV YQ_VERSION_440=${YQ_VERSION_440:-"v4.44.3"}
RUN CMD_NAME=yq && \
    curl -sSLo /usr/local/bin/${CMD_NAME}-4.40 "https://github.com/mikefarah/${CMD_NAME}/releases/download/${YQ_VERSION_440}/${CMD_NAME}_${TARGETOS}_${TARGETARCH}" && \
    chmod +x /usr/local/bin/${CMD_NAME}-4.40 && \
    ln -sf /usr/local/bin/${CMD_NAME}-4.40 /usr/local/bin/yq

# for pipeline compatibility
RUN ln -sf /usr/local/bin/yq /usr/local/bin/yq4

# vcluster for vcluster https://github.com/loft-sh/vcluster/releases
ARG VCLUSTER_VERSION=v0.20.1
RUN export CMD_NAME=vcluster && \
    curl --silent --location -o /tmp/${CMD_NAME} "https://github.com/loft-sh/vcluster/releases/download/${VCLUSTER_VERSION}/${CMD_NAME}-${TARGETOS}-${TARGETARCH}" && \
    chmod +x /tmp/${CMD_NAME} && mv /tmp/${CMD_NAME} /usr/local/bin/${CMD_NAME}-${VCLUSTER_VERSION} && \
    ln -sf /usr/local/bin/${CMD_NAME}-${VCLUSTER_VERSION} /usr/local/bin/${CMD_NAME} && \
    ${CMD_NAME} version

# helm https://github.com/helm/helm/releases
ARG HELM_VERSION_316
ENV HELM_VERSION_316=${HELM_VERSION_316:-"v3.16.1"}
RUN CMD_NAME=helm && \
    curl --silent --location "https://get.helm.sh/${CMD_NAME}-${HELM_VERSION_316}-${TARGETOS}-${TARGETARCH}.tar.gz" | tar xz -C /tmp && \
    chmod +x /tmp/${TARGETOS}-${TARGETARCH}/${CMD_NAME} && mv -f /tmp/${TARGETOS}-${TARGETARCH}/${CMD_NAME} /usr/local/bin/${CMD_NAME}-3.16 && \
    ln -sf /usr/local/bin/${CMD_NAME}-3.16 /usr/local/bin/helm

# kubectl https://kubernetes.io/releases/
ARG KUBECTL_VERSION_131
ENV KUBECTL_VERSION_131=${KUBECTL_VERSION_131:-"v1.31.1"}
RUN CMD_NAME=kubectl && \
    curl -sLO https://dl.k8s.io/release/${KUBECTL_VERSION_131}/bin/${TARGETOS}/${TARGETARCH}/${CMD_NAME} && \
    chmod +x ./${CMD_NAME} && mv -f ./${CMD_NAME} /usr/local/bin/${CMD_NAME}-1.31 && \
    ln -sf /usr/local/bin/${CMD_NAME}-1.31 /usr/local/bin/kubectl
