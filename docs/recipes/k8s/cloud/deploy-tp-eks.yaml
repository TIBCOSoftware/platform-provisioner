#
# Copyright Â© 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

# Recipe for installing TIBCO Platform EKS
apiVersion: v1
kind: helm-install
meta:
  globalEnvVariable:
    # piepline env
    REPLACE_RECIPE: true
    PIPELINE_LOG_DEBUG: false
    PIPELINE_CHECK_DOCKER_STATUS: false
    # github
    GITHUB_TOKEN: ${GUI_GITHUB_TOKEN}
    TP_CHART_REPO: ${GUI_TP_CHART_REPO:-"https://tibcosoftware.github.io/tp-helm-charts"}
    TP_CHART_REPO_USER_NAME: ${GUI_TP_CHART_REPO_USER_NAME}
    TP_CHART_REPO_TOKEN: ${GUI_TP_CHART_REPO_TOKEN}
    PLATFORM_PROVISIONER_REPO: github.com/TIBCOSoftware/platform-provisioner
    # cluster
    TP_CLUSTER_NAME: ${GUI_TP_CLUSTER_NAME}
    TP_CLUSTER_VERSION: ${GUI_TP_CLUSTER_VERSION:-1.31}
    TP_CLUSTER_REGION: ${AWS_REGION:-us-west-2}
    TP_CLUSTER_INSTANCE_TYPE: ${GUI_TP_CLUSTER_INSTANCE_TYPE:-"m5a.xlarge"}
    # domain
    TP_DOMAIN: ${GUI_TP_DOMAIN} # the star domain for the main ingress <cp/dp-env>.${SANDBOX}.dataplanes.pro
    TP_CLUSTER_VPC_CIDR: ${GUI_TP_CLUSTER_CIDR:-"10.180.0.0/16"}
    # ingress
    TP_INGRESS_CLASS: ${GUI_TP_INGRESS_CLASS:-"nginx"}
    TP_SECONDARY_INGRESS_CLASS: ${GUI_TP_SECONDARY_INGRESS_CLASS}
    TP_SECONDARY_DOMAIN: ${GUI_TP_SECONDARY_DOMAIN} # the star domain for the secondary ingress <cp/dp-env>-apps.${SANDBOX}.dataplanes.pro
    TP_INGRESS_RELEASE_NAME: dp-config-aws-ingress
    TP_SECONDARY_INGRESS_RELEASE_NAME: dp-config-aws-secondary-ingress
    TP_INGRESS_NAMESPACE: ingress-system
    TP_ES_RELEASE_NAME: dp-config-es
    TP_CERTIFICATE_CLUSTER_ISSUER: ${GUI_TP_CERTIFICATE_CLUSTER_ISSUER:-"tp-prod"} # the cluster issuer for tp-certificate
    # network policy
    TP_CLUSTER_ENABLE_NETWORK_POLICY: ${GUI_TP_CLUSTER_ENABLE_NETWORK_POLICY:-true}
    # storage
    TP_EBS_ENABLED: true
    TP_EFS_ENABLED: true
    TP_STORAGE_CLASS: ebs-gp3
    TP_STORAGE_CLASS_EFS: efs-sc
    TP_INSTALL_RESOURCE_FOLDER: "/workspace/resources"
    TP_INSTALL_EFS_VALUES_FILE: "${TP_INSTALL_RESOURCE_FOLDER}/efs_values.yaml"
    # TP versions
    TP_CHART_VERSION_DP_CONFIG_AWS: ${GUI_TP_VERSION_DP_CONFIG_AWS:-"1.3.6"}
    TP_CHART_VERSION_DP_CONFIG_ES: ${GUI_TP_VERSION_DP_CONFIG_ES:-"1.2.1"}
    # flow control
    TP_INSTALL_K8S: ${GUI_TP_INSTALL_K8S:-true} # change to true to install k8s
    TP_INSTALL_EFS: ${GUI_TP_INSTALL_EFS:-true} # change to true to install efs
    TP_INSTALL_STORAGE: ${GUI_TP_INSTALL_STORAGE:-true} # change to false to skip storage installation
    TP_SCRIPT_BRANCH: ${GUI_TP_SCRIPT_BRANCH:-main}
    TP_SCRIPT_NAME_SH_EKS: create-eks.sh # the script that DP will run
    TP_SCRIPT_NAME_SH_EFS: create-efs.sh # the script that DP will run
    TP_INSTALL_POSTGRES: ${GUI_TP_INSTALL_POSTGRES:-true}
    # Do not change, variables to configure nginx/kong related resources based on ingressclass passed
    TP_ENABLE_NGINX: $([[ "$TP_INGRESS_CLASS" == "nginx" ]] && echo "true" || echo "false")
    TP_ENABLE_TRAEFIK: $([[ "$TP_INGRESS_CLASS" == "traefik" ]] && echo "true" || echo "false")
    TP_ENABLE_SECONDARY_KONG: $([[ "$TP_SECONDARY_INGRESS_CLASS" == "kong" ]] && echo "true" || echo "false")
    TP_DEPLOY_SECONDARY_INGRESS: $([[ "$TP_ENABLE_SECONDARY_KONG" == "true" ]] && echo "true" || echo "false")
    TP_HTTP_INGRESS_BACKEND_SERVICE: ${TP_INGRESS_RELEASE_NAME}-$( ( [[  "$TP_INGRESS_CLASS" == "nginx" ]] && echo "ingress-nginx-controller" ) || ( [[ "$TP_INGRESS_CLASS" == "kong" ]] && echo "kong-proxy" ) )
    TP_INSTALL_CERT_MANAGER: ${GUI_TP_INSTALL_CERT_MANAGER:-true}
    TP_INSTALL_EXTERNAL_DNS: ${GUI_TP_INSTALL_EXTERNAL_DNS:-true}
    TP_INSTALL_METRICS_SERVER: ${GUI_TP_INSTALL_METRICS_SERVER:-true}
    TP_INSTALL_O11Y: ${GUI_TP_INSTALL_O11Y:-false}
    TP_SKIP_GENERATE_CLUSTER_ISSUER: false
  tools:
    yq: "4.40"
preTasks:
- condition: ${TP_INSTALL_K8S}
  repo:
    git:
      github:
        repo: ${PLATFORM_PROVISIONER_REPO}
        path: docs/recipes/k8s/cloud/scripts/eks
        branch: ${TP_SCRIPT_BRANCH}
  script:
    ignoreErrors: false
    fileName: ${TP_SCRIPT_NAME_SH_EKS}
- condition: ${TP_INSTALL_EFS}
  clusters:
    - name: ${TP_CLUSTER_NAME}
  repo:
    git:
      github:
        repo: ${PLATFORM_PROVISIONER_REPO}
        path: docs/recipes/k8s/cloud/scripts/eks
        branch: ${TP_SCRIPT_BRANCH}
  script:
    ignoreErrors: false
    fileName: ${TP_SCRIPT_NAME_SH_EFS}
helmCharts:
- name: cert-manager
  condition: ${TP_INSTALL_CERT_MANAGER}
  version: v1.16.1 # release: https://github.com/cert-manager/cert-manager/releases
  repo:
    helm:
      url: https://charts.jetstack.io
  values:
    keepPrevious: true
    content: |
      installCRDs: true
      serviceAccount:
        create: false
        name: cert-manager
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: cert-manager
  namespace: cert-manager
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    postDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: ${TP_SKIP_GENERATE_CLUSTER_ISSUER}
      content: |
        kubectl apply -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: ${TP_CERTIFICATE_CLUSTER_ISSUER}
        spec:
          acme:
            email: cloud@tibco.com
            server: https://acme-v02.api.letsencrypt.org/directory
            privateKeySecretRef:
              name: "${TP_CERTIFICATE_CLUSTER_ISSUER}"
            solvers:
              - dns01:
                  route53:
                    region: ${TP_CLUSTER_REGION}
        EOF
- name: external-dns
  condition: ${TP_INSTALL_EXTERNAL_DNS}
  version: 1.15.0 # release: https://github.com/kubernetes-sigs/external-dns/releases
  repo:
    helm:
      url: https://kubernetes-sigs.github.io/external-dns/
  values:
    keepPrevious: true
    content: |
      serviceAccount:
        create: false
        name: external-dns 
      extraArgs:
        # only register DNS for these ingress classes
        - "--ingress-class=${TP_INGRESS_CLASS}"
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: external-dns
  namespace: external-dns-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: aws-load-balancer-controller
  version: 1.8.3 # release: https://github.com/aws/eks-charts/releases 1.9.1 has issue: https://github.com/eksctl-io/eksctl/issues/7987
  repo:
    helm:
      url: https://aws.github.io/eks-charts
  values:
    keepPrevious: true
    content: |
      clusterName: ${TP_CLUSTER_NAME}
      serviceAccount:
        create: false
        name: aws-load-balancer-controller
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: aws-load-balancer-controller
  namespace: kube-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: metrics-server
  condition: ${TP_INSTALL_METRICS_SERVER}
  version: "3.12.2" # release: https://github.com/kubernetes-sigs/metrics-server/blob/master/charts/metrics-server/Chart.yaml
  repo:
    helm:
      url: https://kubernetes-sigs.github.io/metrics-server/
  values:
    keepPrevious: true
    content: |
      clusterName: ${TP_CLUSTER_NAME}
      serviceAccount:
        create: true
        name: metrics-server
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: metrics-server
  namespace: kube-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: dp-config-aws
  version: "${TP_CHART_VERSION_DP_CONFIG_AWS}"
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: false
    content: |
      dns:
        domain: "${TP_DOMAIN}"
      httpIngress:
        enabled: false # set to true to use ALB
        name: ${TP_INGRESS_CLASS}
        backend:
          serviceName: ${TP_HTTP_INGRESS_BACKEND_SERVICE}
        annotations:
          alb.ingress.kubernetes.io/group.name: "${TP_DOMAIN}"
          external-dns.alpha.kubernetes.io/hostname: "*.${TP_DOMAIN}"
          # this will be used for external-dns annotation filter
          kubernetes.io/ingress.class: alb
      ingress-nginx:
        enabled: ${TP_ENABLE_NGINX}
        controller:
          service:
            type: LoadBalancer # use NLB for nginx, set to ClusterIP when using ALB
            loadBalancerClass: service.k8s.aws/nlb # 
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip # by default it is instance which will route traffic to instance nodePort
              service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing # used for aws-load-balancer-controller to create public NLB
              external-dns.alpha.kubernetes.io/hostname: "*.${TP_DOMAIN}"
            enableHttp: false # disable http 80 port on service and NLB
          config:
            use-forwarded-headers: 'true'          # PDP-945
          extraArgs:
            default-ssl-certificate: ${TP_INGRESS_NAMESPACE}/tp-certificate-main-ingress
      traefik:
        enabled: ${TP_ENABLE_TRAEFIK}
        service:
          type: LoadBalancer # use NLB for traefik, set to ClusterIP when using ALB
          loadBalancerClass: service.k8s.aws/nlb # 
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip # by default it is instance which will route traffic to instance nodePort
            service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing # used for aws-load-balancer-controller to create public NLB
            external-dns.alpha.kubernetes.io/hostname: "*.${TP_DOMAIN}"
        ingressRoute: # for dashboard
          dashboard:
            enabled: true
            matchRule: Host(`traefik-alb-apps.${TP_DOMAIN}`) && PathPrefix(`/dashboard`) || Host(`traefik-alb-apps.${TP_DOMAIN}`) && PathPrefix(`/api`)
            entryPoints:
              - traefik
              - web
              - websecure
        providers:  # for external service
          kubernetesIngress:
            allowExternalNameServices: true
        additionalArguments:
          - '--entryPoints.websecure.forwardedHeaders.insecure'
          - '--serversTransport.insecureSkipVerify=true'
          - '--providers.kubernetesingress.ingressendpoint.publishedservice=${TP_INGRESS_NAMESPACE}/${TP_INGRESS_RELEASE_NAME}-traefik'
        tlsStore:
          default:
            defaultCertificate:
              secretName: tp-certificate-main-ingress
      kong:
        enabled: false
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: ${TP_INGRESS_RELEASE_NAME}
  namespace: ${TP_INGRESS_NAMESPACE}
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: ${TP_SKIP_GENERATE_CLUSTER_ISSUER}
      content: |
        # create a namespace for the main ingress
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${TP_INGRESS_NAMESPACE}
          labels:
            networking.platform.tibco.com/non-cp-ns: enable
        EOF
        
        # create a certificate for the main ingress
        kubectl apply -f - << EOF
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: tp-certificate-main-ingress
          namespace: ${TP_INGRESS_NAMESPACE}
        spec:
          secretName: tp-certificate-main-ingress
          issuerRef:
            name: ${TP_CERTIFICATE_CLUSTER_ISSUER}
            kind: ClusterIssuer
          dnsNames:
            - '*.${TP_DOMAIN}'
        EOF
- name: dp-config-aws
  version: "${TP_CHART_VERSION_DP_CONFIG_AWS}"
  condition: ${TP_DEPLOY_SECONDARY_INGRESS}
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: false
    content: |
      dns:
        domain: "${TP_SECONDARY_DOMAIN}"
      httpIngress:
        enabled: false # set to true to use ALB
      ingress-nginx:
        enabled: false
      kong:
        enabled: ${TP_ENABLE_SECONDARY_KONG}
        secretVolumes:
        - tp-certificate-secondary-ingress
        env:
          ssl_cert: /etc/secrets/tp-certificate-secondary-ingress/tls.crt
          ssl_cert_key: /etc/secrets/tp-certificate-secondary-ingress/tls.key
        proxy:
          type: LoadBalancer
          loadBalancerClass: service.k8s.aws/nlb # 
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip # by default it is instance which will route traffic to instance nodePort
            service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing # used for aws-load-balancer-controller to create public NLB
            external-dns.alpha.kubernetes.io/hostname: "*.${TP_SECONDARY_DOMAIN}"
          tls:
            enabled: true
          http:
            enabled: false
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: ${TP_SECONDARY_INGRESS_RELEASE_NAME}
  namespace: ${TP_INGRESS_NAMESPACE}
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: ${TP_SKIP_GENERATE_CLUSTER_ISSUER}
      content: |
        # create a namespace for the main ingress
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${TP_INGRESS_NAMESPACE}
          labels:
            networking.platform.tibco.com/non-cp-ns: enable
        EOF
        
        # create a certificate for the kong apps ingress
        kubectl apply -f - << EOF
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: tp-certificate-secondary-ingress
          namespace: ${TP_INGRESS_NAMESPACE}
        spec:
          secretName: tp-certificate-secondary-ingress
          issuerRef:
            name: ${TP_CERTIFICATE_CLUSTER_ISSUER}
            kind: ClusterIssuer
          dnsNames:
            - '*.${TP_SECONDARY_DOMAIN}'
        EOF
- name: dp-config-aws
  version: "${TP_CHART_VERSION_DP_CONFIG_AWS}"
  condition: ${TP_INSTALL_STORAGE}
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: false
    content: |
      httpIngress:
        enabled: false
      ingress-nginx:
        enabled: false
      service:
        enabled: false
      storageClass:
        ebs:
          enabled: ${TP_EBS_ENABLED}
        efs:
          enabled: ${TP_EFS_ENABLED}
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: dp-config-aws-storage
  namespace: storage-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
    extra: "--values ${TP_INSTALL_EFS_VALUES_FILE}"
- name: postgresql
  version: 15.5.38 # 15.5.38 use postgresql 16.4.0, 11.9.13 use postgresql 14.5.0 release: https://artifacthub.io/packages/helm/bitnami/postgresql
  namespace: tibco-ext
  releaseName: postgresql
  condition: ${TP_INSTALL_POSTGRES}
  repo:
    helm:
      url: https://charts.bitnami.com/bitnami
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  values:
    keepPrevious: true
    content: |
      auth:
        postgresPassword: postgres
        username: postgres
        password: postgres
        database: "postgres"
      global:
        storageClass: ${TP_STORAGE_CLASS}
  flags:
    createNamespace: true
    timeout: 1h
- name: eck-operator
  version: 2.14.0 # release: https://artifacthub.io/packages/helm/elastic/eck-operator
  condition: ${TP_INSTALL_O11Y}
  repo:
    helm:
      url: https://helm.elastic.co
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: eck-operator
  namespace: elastic-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: dp-config-es
  version: "${TP_CHART_VERSION_DP_CONFIG_ES}"
  condition: ${TP_INSTALL_O11Y}
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: true
    content: |
      domain: ${TP_DOMAIN}
      es:
        version: "8.15.2"
        ingress:
          ingressClassName: ${TP_INGRESS_CLASS}
          service: ${TP_ES_RELEASE_NAME}-es-http
        storage:
          name: ${TP_STORAGE_CLASS}
      kibana:
        version: "8.15.2"
        ingress:
          ingressClassName: ${TP_INGRESS_CLASS}
          service: ${TP_ES_RELEASE_NAME}-kb-http
      apm:
        enabled: true
        version: "8.15.2"
        ingress:
          ingressClassName: ${TP_INGRESS_CLASS}
          service: ${TP_ES_RELEASE_NAME}-apm-http
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: ${TP_ES_RELEASE_NAME}
  namespace: elastic-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: kube-prometheus-stack
  version: "65.2.0" # release: https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
  condition: ${TP_INSTALL_O11Y}
  repo:
    helm:
      url: https://prometheus-community.github.io/helm-charts
  values:
    keepPrevious: true
    content: |
      grafana:
        plugins:
          - grafana-piechart-panel
        ingress:
          enabled: true
          ingressClassName: ${TP_INGRESS_CLASS}
          hosts:
          - grafana.${TP_DOMAIN}
      prometheus:
        prometheusSpec:
          enableRemoteWriteReceiver: true
          remoteWriteDashboards: true
          additionalScrapeConfigs:
          - job_name: otel-collector
            kubernetes_sd_configs:
            - role: pod
            relabel_configs:
            - action: keep
              regex: "true"
              source_labels:
              - __meta_kubernetes_pod_label_prometheus_io_scrape
            - action: keep
              regex: "infra"
              source_labels:
              - __meta_kubernetes_pod_label_platform_tibco_com_workload_type
            - action: keepequal
              source_labels: [__meta_kubernetes_pod_container_port_number]
              target_label: __meta_kubernetes_pod_label_prometheus_io_port
            - action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              source_labels:
              - __address__
              - __meta_kubernetes_pod_label_prometheus_io_port
              target_label: __address__
            - source_labels: [__meta_kubernetes_pod_label_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
              replacement: /$1
        ingress:
          enabled: true
          ingressClassName: ${TP_INGRESS_CLASS}
          hosts:
          - prometheus-internal.${TP_DOMAIN}
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: kube-prometheus-stack
  namespace: prometheus-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
