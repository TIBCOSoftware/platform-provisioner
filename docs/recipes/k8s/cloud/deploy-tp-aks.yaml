#
# Copyright © 2024. Cloud Software Group, Inc.
# This file is subject to the license terms contained
# in the license file that is distributed with this file.
#

# Recipe for installing TIBCO Platform AKS
apiVersion: v1
kind: helm-install
meta:
  globalEnvVariable:
    # piepline env
    REPLACE_RECIPE: true
    PIPELINE_LOG_DEBUG: false
    PIPELINE_CHECK_DOCKER_STATUS: false
    # github
    GITHUB_TOKEN: ${GUI_GITHUB_TOKEN}
    TP_CHART_REPO: ${GUI_TP_CHART_REPO:-"https://tibcosoftware.github.io/tp-helm-charts"}
    TP_CHART_REPO_USER_NAME: ${GUI_TP_CHART_REPO_USER_NAME}
    TP_CHART_REPO_TOKEN: ${GUI_TP_CHART_REPO_TOKEN}
    PLATFORM_PROVISIONER_REPO: ${GUI_PLATFORM_PROVISIONER_REPO:-github.com/TIBCOSoftware/platform-provisioner}

    # Azure env
    ACCOUNT: ${ACCOUNT:-"azure-"} # Azure account prefix to trigger authenticating with Azure
    TP_RESOURCE_GROUP: ${GUI_TP_RESOURCE_GROUP} # Azure resource group name
    AZURE_RESOURCE_GROUP: ${TP_RESOURCE_GROUP} # provisioner pipeline assume role needed
    TP_AZURE_REGION: ${GUI_TP_AZURE_REGION:-"westus2"} # the default region for the azure account

    # cluster
    TP_CLUSTER_NAME: ${GUI_TP_CLUSTER_NAME}
    TP_CLUSTER_VERSION: ${GUI_TP_CLUSTER_VERSION:-1.31}
    TP_AUTHORIZED_IP: ${GUI_TP_AUTHORIZED_IP} # your ip x.x.x.x/32

    # domain
    TP_TOP_LEVEL_DOMAIN: ${GUI_TP_TOP_LEVEL_DOMAIN} # the top level domain for the main ingress
    TP_SANDBOX: ${GUI_TP_SANDBOX} # the sandbox for the main ingress
    TP_MAIN_INGRESS_SANDBOX_SUBDOMAIN: ${GUI_TP_MAIN_INGRESS_SANDBOX_SUBDOMAIN}
    TP_DOMAIN: ${TP_MAIN_INGRESS_SANDBOX_SUBDOMAIN}.${TP_SANDBOX}.${TP_TOP_LEVEL_DOMAIN} # the actual domain for the TIBCO platform. Sample format: <cp/dp-env>.${SANDBOX}.${TP_TOP_LEVEL_DOMAIN}
    TP_SECONDARY_INGRESS_SANDBOX_SUBDOMAIN: ${GUI_TP_SECONDARY_INGRESS_SANDBOX_SUBDOMAIN}
    TP_SECONDARY_DOMAIN: ${TP_SECONDARY_INGRESS_SANDBOX_SUBDOMAIN}.${TP_SANDBOX}.${TP_TOP_LEVEL_DOMAIN} # the star domain for the secondary ingress <cp/dp-env>-apps.${SANDBOX}.${TP_TOP_LEVEL_DOMAIN}
    # ingress
    TP_GENERATE_CLUSTER_ISSUER: ${GUI_TP_GENERATE_CLUSTER_ISSUER:-true}
    TP_CERTIFICATE_CLUSTER_ISSUER: ${GUI_TP_CERTIFICATE_CLUSTER_ISSUER:-"cic-cert-subscription-scope-production-main"} # the cluster issuer
    TP_MAIN_INGRESS_CLASS_NAME: "azure-application-gateway" # name of azure application gateway ingress controller
    TP_DNS_RESOURCE_GROUP: ${GUI_TP_DNS_RESOURCE_GROUP} # must provide
    TP_INGRESS_CLASS: ${GUI_TP_INGRESS_CLASS:-"nginx"} # name of main ingress class used by capabilities
    TP_SECONDARY_INGRESS_CLASS: ${GUI_TP_SECONDARY_INGRESS_CLASS}
    TP_INGRESS_NAMESPACE: ${GUI_TP_INGRESS_NAMESPACE:-"ingress-system"} # namespace for the ingress controller
    TP_INGRESS_RELEASE_NAME: dp-config-aks-ingress
    TP_SECONDARY_INGRESS_RELEASE_NAME: dp-config-aks-secondary-ingress
    # network policy
    TP_CLUSTER_ENABLE_NETWORK_POLICY: ${GUI_TP_CLUSTER_ENABLE_NETWORK_POLICY:-false}
    # storage
    TP_DISK_ENABLED: "true" # name of azure disk storage class
    TP_DISK_STORAGE_CLASS: "azure-disk-sc" # name of azure disk storage class
    TP_FILE_ENABLED: "true" # to enable azure files storage class
    TP_FILE_STORAGE_CLASS: "azure-files-sc" # name of azure files storage class
    TP_STORAGE_CLASS: "${TP_DISK_STORAGE_CLASS}" # name of azure disk storage class
    # TP versions
    TP_CHART_VERSION_DP_CONFIG_AKS: ${GUI_TP_VERSION_DP_CONFIG_AWS:-"1.3.1"}
    TP_CHART_VERSION_DP_CONFIG_ES: ${GUI_TP_VERSION_DP_CONFIG_ES:-"1.2.1"}
    # o11y
    TP_ES_RELEASE_NAME: "dp-config-es" # name of dp-config-es release name
    # flow control
    TP_INSTALL_K8S: ${GUI_TP_INSTALL_K8S:-true} # change to true to install k8s
    TP_INSTALL_RESOURCE_FOLDER: "/workspace/resources"
    TP_INSTALL_CHART_VALUES_FILE: "/workspace/resources/global-values.yaml"
    TP_INSTALL_STORAGE: ${GUI_TP_INSTALL_STORAGE:-true}
    TP_INSTALL_STORAGE_EMS: ${GUI_TP_INSTALL_STORAGE_EMS:-false} # set to true to install storage for TIBCO Enterprise Message Service™ (EMS) recommended production
    TP_SCRIPT_BRANCH: ${GUI_TP_SCRIPT_BRANCH:-main}
    TP_INSTALL_CERT_MANAGER: ${GUI_TP_INSTALL_CERT_MANAGER:-true}
    TP_INSTALL_EXTERNAL_DNS: ${GUI_TP_INSTALL_EXTERNAL_DNS:-true}
    TP_INSTALL_POSTGRES: ${GUI_TP_INSTALL_POSTGRES:-true}
    TP_INSTALL_O11Y: ${GUI_TP_INSTALL_O11Y:-false}
    # Do not change, variables to configure nginx/kong related resources based on ingressclass passed
    TP_ENABLE_NGINX: $([[ "$TP_INGRESS_CLASS" == "nginx" ]] && echo "true" || echo "false")
    TP_ENABLE_TRAEFIK: $([[ "$TP_INGRESS_CLASS" == "traefik" ]] && echo "true" || echo "false")
    TP_ENABLE_SECONDARY_KONG: $([[ "$TP_SECONDARY_INGRESS_CLASS" == "kong" ]] && echo "true" || echo "false")
    TP_DEPLOY_SECONDARY_INGRESS: $([[ "$TP_ENABLE_SECONDARY_KONG" == "true" ]] && echo "true" || echo "false")
    TP_SKIP_GENERATE_MAIN_INGRESS_CERTIFICATE: false
    TP_SKIP_GENERATE_SECONDARY_INGRESS_CERTIFICATE: false
  tools:
    yq: "4.40"
preTasks:
- condition: ${TP_INSTALL_K8S}
  repo:
    git:
      github:
        repo: ${PLATFORM_PROVISIONER_REPO}
        path: docs/recipes/k8s/cloud/scripts/aks
        branch: ${TP_SCRIPT_BRANCH}
  script:
    ignoreErrors: false
    fileName: pre-aks-cluster-script.sh
- condition: ${TP_INSTALL_K8S}
  repo:
    git:
      github:
        repo: ${PLATFORM_PROVISIONER_REPO}
        path: docs/recipes/k8s/cloud/scripts/aks
        branch: ${TP_SCRIPT_BRANCH}
  script:
    ignoreErrors: false
    fileName: script.sh
    content: |
      #!/bin/bash
      # This script is used to create aks cluster
      echo "listing az extensions"
      az extension list
      echo "installing az extensions aks-preview"
      az extension add --name aks-preview
      az extension update --name aks-preview
      chmod +x create-aks.sh
      ./create-aks.sh
- condition: ${TP_INSTALL_K8S}
  repo:
    git:
      github:
        repo: ${PLATFORM_PROVISIONER_REPO}
        path: docs/recipes/k8s/cloud/scripts/aks
        branch: ${TP_SCRIPT_BRANCH}
  script:
    ignoreErrors: false
    fileName: post-aks-cluster-script.sh
helmCharts:
- name: cert-manager
  condition: ${TP_INSTALL_CERT_MANAGER}
  version: v1.16.1 # release: https://github.com/cert-manager/cert-manager/releases
  repo:
    helm:
      url: https://charts.jetstack.io
  values:
    keepPrevious: true
    content: |
      installCRDs: true
      podLabels:
        azure.workload.identity/use: "true"
      serviceAccount:
        labels:
          azure.workload.identity/use: "true"
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: cert-manager
  namespace: cert-manager
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: external-dns
  condition: ${TP_INSTALL_EXTERNAL_DNS}
  version: 1.15.0 # release: https://github.com/kubernetes-sigs/external-dns/releases
  repo:
    helm:
      url: https://kubernetes-sigs.github.io/external-dns/
  values:
    keepPrevious: true
    content: |
      provider: azure
      sources:
        - service
        - ingress
      domainFilters:
        - ${TP_SANDBOX}.${TP_TOP_LEVEL_DOMAIN}   # must be the sandbox domain as we create DNS zone for this
      extraVolumes: # for azure.json
      - name: azure-config-file
        secret:
          secretName: azure-config-file
      extraVolumeMounts:
      - name: azure-config-file
        mountPath: /etc/kubernetes
        readOnly: true
      extraArgs:
        # only register DNS for these ingress classes
        - "--ingress-class=${TP_INGRESS_CLASS}"
        - --txt-wildcard-replacement=wildcard    # issue for Azure dns zone: https://github.com/kubernetes-sigs/external-dns/issues/2922
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: external-dns
  namespace: external-dns-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: dp-config-aks # this is used to deploy cluster issuer
  condition: ${TP_GENERATE_CLUSTER_ISSUER}
  version: "${TP_CHART_VERSION_DP_CONFIG_AKS}"
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: true
    content: |
      global:
        dnsSandboxSubdomain: "${TP_SANDBOX}"          # must be the sandbox domain as we create DNS zone for this
        dnsGlobalTopDomain: "${TP_TOP_LEVEL_DOMAIN}"  # must be the top level domain
        azureSubscriptionDnsResourceGroup: "${TP_DNS_RESOURCE_GROUP}"
      httpIngress:
        enabled: false
        name: main # this is part of cluster issuer name. 
      ingress-nginx:
        enabled: false
      kong:
        enabled: false
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: ${TP_INGRESS_RELEASE_NAME}-certificate
  namespace: ${TP_INGRESS_NAMESPACE}
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
    extra: "--values ${TP_INSTALL_CHART_VALUES_FILE}"
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: false
      content: |
        # this is used to provide Azure information to ingress
        mkdir -p "${TP_INSTALL_RESOURCE_FOLDER}"
        touch "${TP_INSTALL_CHART_VALUES_FILE}"
        export client_id=$(az aks show --resource-group "${TP_RESOURCE_GROUP}" --name "${TP_CLUSTER_NAME}" --query "identityProfile.kubeletidentity.clientId" --output tsv)
        export subscription_id=$(az account show --query id -o tsv)
        yq eval '.global += {"azureAwiAsoDnsClientId": env(client_id), "azureSubscriptionId": env(subscription_id)}' "${TP_INSTALL_CHART_VALUES_FILE}" -i
        echo "injected values:"
        cat "${TP_INSTALL_CHART_VALUES_FILE}"
- name: dp-config-aks
  version: "${TP_CHART_VERSION_DP_CONFIG_AKS}"
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: true
    content: |
      clusterIssuer:
        create: false
      httpIngress:
        enabled: false
      ingress-nginx:
        enabled: ${TP_ENABLE_NGINX}
        controller:
          service:
            type: LoadBalancer # use NLB for nginx, set to ClusterIP when using ALB
            annotations:
              external-dns.alpha.kubernetes.io/hostname: "*.${TP_DOMAIN}"
              service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
            enableHttp: false # disable http 80 port on service and NLB
          config:
            # required by apps swagger
            use-forwarded-headers: 'true'          # PDP-945
          extraArgs:
            default-ssl-certificate: ${TP_INGRESS_NAMESPACE}/tp-certificate-main-ingress
      traefik:
        enabled: ${TP_ENABLE_TRAEFIK}
        service:
          type: LoadBalancer # use NLB for Traefik, set to ClusterIP when using ALB
          annotations:
            external-dns.alpha.kubernetes.io/hostname: "*.${TP_DOMAIN}"
            service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
        ingressRoute: # for dashboard
          dashboard:
            enabled: true
            matchRule: Host(`traefik-alb-apps.${TP_DOMAIN}`) && PathPrefix(`/dashboard`) || Host(`traefik-alb-apps.${TP_DOMAIN}`) && PathPrefix(`/api`)
            entryPoints:
              - traefik
              - web
              - websecure
        providers:  # for external service
          kubernetesIngress:
            allowExternalNameServices: true
        additionalArguments:
          - '--entryPoints.websecure.forwardedHeaders.insecure'
          - '--serversTransport.insecureSkipVerify=true'
          - '--providers.kubernetesingress.ingressendpoint.publishedservice=${TP_INGRESS_NAMESPACE}/${TP_INGRESS_RELEASE_NAME}-traefik'
        tlsStore:
          default:
            defaultCertificate:
              secretName: tp-certificate-main-ingress
      kong:
        enabled: false
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: ${TP_INGRESS_RELEASE_NAME}
  namespace: ${TP_INGRESS_NAMESPACE}
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: ${TP_SKIP_GENERATE_MAIN_INGRESS_CERTIFICATE}
      content: |
        # create a namespace for the main ingress
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${TP_INGRESS_NAMESPACE}
          labels:
            networking.platform.tibco.com/non-cp-ns: enable
        EOF
        
        # create a certificate for the main ingress
        kubectl apply -f - << EOF
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: tp-certificate-main-ingress
          namespace: ${TP_INGRESS_NAMESPACE}
        spec:
          secretName: tp-certificate-main-ingress
          issuerRef:
            name: ${TP_CERTIFICATE_CLUSTER_ISSUER}
            kind: ClusterIssuer
          dnsNames:
            - '*.${TP_DOMAIN}'
        EOF
- name: dp-config-aks
  condition: ${TP_DEPLOY_SECONDARY_INGRESS}
  version: "${TP_CHART_VERSION_DP_CONFIG_AKS}"
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: true
    content: |
      clusterIssuer:
        create: false
      httpIngress:
        enabled: false
      ingress-nginx:
        enabled: false
      kong:
        enabled: ${TP_ENABLE_SECONDARY_KONG}
        secretVolumes:
        - tp-certificate-secondary-ingress
        env:
          ssl_cert: /etc/secrets/tp-certificate-secondary-ingress/tls.crt
          ssl_cert_key: /etc/secrets/tp-certificate-secondary-ingress/tls.key
        proxy:
          type: LoadBalancer
          annotations:
            external-dns.alpha.kubernetes.io/hostname: "*.${TP_SECONDARY_DOMAIN}"
            service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
          tls:
            enabled: true
          http:
            enabled: false
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: ${TP_SECONDARY_INGRESS_RELEASE_NAME}
  namespace: ${TP_INGRESS_NAMESPACE}
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
  hooks:
    preDeploy:
      ignoreErrors: false
      base64Encoded: false
      skip: ${TP_SKIP_GENERATE_SECONDARY_INGRESS_CERTIFICATE}
      content: |
        # create a namespace for the main ingress
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${TP_INGRESS_NAMESPACE}
          labels:
            networking.platform.tibco.com/non-cp-ns: enable
        EOF
        
        # create a certificate for the main ingress
        kubectl apply -f - << EOF
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: tp-certificate-secondary-ingress
          namespace: ${TP_INGRESS_NAMESPACE}
        spec:
          secretName: tp-certificate-secondary-ingress
          issuerRef:
            name: ${TP_CERTIFICATE_CLUSTER_ISSUER}
            kind: ClusterIssuer
          dnsNames:
            - '*.${TP_SECONDARY_DOMAIN}'
        EOF
- name: dp-config-aks
  condition: ${TP_INSTALL_STORAGE}
  version: "${TP_CHART_VERSION_DP_CONFIG_AKS}"
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: true
    base64Encoded: false
    content: |
      httpIngress:
        enabled: false
      clusterIssuer:
        create: false
      storageClass:
        azuredisk:
          enabled: ${TP_DISK_ENABLED}
          name: ${TP_DISK_STORAGE_CLASS}
          volumeBindingMode: Immediate
        azurefile: # this is used for standard CP/DP storage
          enabled: ${TP_FILE_ENABLED}
          name: ${TP_FILE_STORAGE_CLASS}
          volumeBindingMode: Immediate # must be set to Immediate for CP
          parameters:
            skuName: Premium_LRS
            allowBlobPublicAccess: "false"
            networkEndpointType: privateEndpoint
          mountOptions:
            - mfsymlinks
            - cache=strict
            - nosharesock
      ingress-nginx:
        enabled: false
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: dp-config-aks-storage
  namespace: storage-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: dp-config-aks
  version: "${TP_CHART_VERSION_DP_CONFIG_AKS}"
  condition: ${TP_INSTALL_STORAGE_EMS}
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: true
    base64Encoded: false
    content: |
      httpIngress:
        enabled: false
      clusterIssuer:
        create: false
      storageClass:
        azuredisk:
          enabled: true
          name: azure-disk-sc-ems
          reclaimPolicy: "Retain"
          parameters:
            skuName: Premium_LRS # other values: Premium_ZRS, StandardSSD_LRS (default)
        azurefile:
          enabled: true
          name: azure-files-sc-ems
          reclaimPolicy: "Retain"
          parameters:
            allowBlobPublicAccess: "false"
            networkEndpointType: privateEndpoint
            skuName: Premium_LRS # other values: Premium_ZRS
            protocol: nfs
          mountOptions:
            - soft
            - timeo=300
            - actimeo=1
            - retrans=2
            - _netdev
      ingress-nginx:
        enabled: false
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: dp-config-aks-storage-ems
  namespace: storage-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: postgresql
  version: 15.5.38 # 15.5.38 use postgresql 16.4.0, 11.9.13 use postgresql 14.5.0 release: https://artifacthub.io/packages/helm/bitnami/postgresql
  namespace: tibco-ext
  releaseName: postgresql
  condition: ${TP_INSTALL_POSTGRES}
  repo:
    helm:
      url: https://charts.bitnami.com/bitnami
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  values:
    keepPrevious: true
    content: |
      auth:
        postgresPassword: postgres
        username: postgres
        password: postgres
        database: "postgres"
      global:
        storageClass: ${TP_STORAGE_CLASS}
  flags:
    createNamespace: true
    timeout: 1h
- name: eck-operator
  version: 2.14.0 # release: https://artifacthub.io/packages/helm/elastic/eck-operator
  condition: ${TP_INSTALL_O11Y}
  repo:
    helm:
      url: https://helm.elastic.co
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: eck-operator
  namespace: elastic-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: dp-config-es
  version: "${TP_CHART_VERSION_DP_CONFIG_ES}"
  condition: ${TP_INSTALL_O11Y}
  repo:
    helm:
      url: ${TP_CHART_REPO}
      username: "${TP_CHART_REPO_USER_NAME}"
      password: "${TP_CHART_REPO_TOKEN}"
  values:
    keepPrevious: true
    content: |
      domain: ${TP_DOMAIN}
      es:
        version: "8.15.2"
        ingress:
          ingressClassName: ${TP_INGRESS_CLASS}
          service: ${TP_ES_RELEASE_NAME}-es-http
        storage:
          name: ${TP_DISK_STORAGE_CLASS}
      kibana:
        version: "8.15.2"
        ingress:
          ingressClassName: ${TP_INGRESS_CLASS}
          service: ${TP_ES_RELEASE_NAME}-kb-http
      apm:
        enabled: true
        version: "8.15.2"
        ingress:
          ingressClassName: ${TP_INGRESS_CLASS}
          service: ${TP_ES_RELEASE_NAME}-apm-http
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: ${TP_ES_RELEASE_NAME}
  namespace: elastic-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
- name: kube-prometheus-stack
  version: "65.2.0" # release: https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
  condition: ${TP_INSTALL_O11Y}
  repo:
    helm:
      url: https://prometheus-community.github.io/helm-charts
  values:
    keepPrevious: true
    content: |
      grafana:
        plugins:
          - grafana-piechart-panel
        ingress:
          enabled: true
          ingressClassName: ${TP_INGRESS_CLASS}
          hosts:
          - grafana.${TP_DOMAIN}
      prometheus:
        prometheusSpec:
          enableRemoteWriteReceiver: true
          remoteWriteDashboards: true
          additionalScrapeConfigs:
          - job_name: otel-collector
            kubernetes_sd_configs:
            - role: pod
            relabel_configs:
            - action: keep
              regex: "true"
              source_labels:
              - __meta_kubernetes_pod_label_prometheus_io_scrape
            - action: keep
              regex: "infra"
              source_labels:
              - __meta_kubernetes_pod_label_platform_tibco_com_workload_type
            - action: keepequal
              source_labels: [__meta_kubernetes_pod_container_port_number]
              target_label: __meta_kubernetes_pod_label_prometheus_io_port
            - action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              source_labels:
              - __address__
              - __meta_kubernetes_pod_label_prometheus_io_port
              target_label: __address__
            - source_labels: [__meta_kubernetes_pod_label_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
              replacement: /$1
        ingress:
          enabled: true
          ingressClassName: ${TP_INGRESS_CLASS}
          hosts:
          - prometheus-internal.${TP_DOMAIN}
  cluster:
    names:
      - ${TP_CLUSTER_NAME}
  releaseName: kube-prometheus-stack
  namespace: prometheus-system
  flags:
    wait: true
    timeout: 1h
    createNamespace: true
